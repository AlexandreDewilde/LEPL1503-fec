#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/**
 *
 * This function compares 2 matrices in order to determine if those matrices are equal or different.
 * @param arr1: a pointer of the file that have information to write in the output file
 * @param arr2 : a pointer of the file that we want to keep informations in (write in)
 * @param size_x: a pointer of the file that have information to write in the output file
 * @param size_y: a pointer of the file that have information to write in the output file
 * @return 0 if arr1 is equal to arr2, -1 if not.
 */
int compare_2Darray(uint8_t** arr1, uint8_t** arr2, uint32_t size_x, uint32_t size_y);

/**
 *
 * This function generates a random vector of a given size
 * @param size: the size desired of the vector created by this function
 * @return the vector of the given size
 */
uint8_t* generate_random_vector(uint32_t size);

/**
 *
 * This function fills a given vector of random numbers
 * @param vector: a pointer of the vector to fill in
 * @param size: the size desired of the given vector 
 */
void fill_vector_random(uint8_t *vector, uint32_t size);

/**
 *
 * This function gives a copy of the given matrix
 * @param arr: the matrix to copy
 * @param x: -
 * @param y: -
 * @return the new matrix, copy of the given matrix
 */
uint8_t **deep_copy(uint8_t **arr, uint32_t x, uint32_t y);

/**
 *
 * This function fill a given matrix with values from another given matrix
 * @param src: the matrix to copy
 * @param dest: the matrix that is going to be filled with values from src
 * @param x: -
 * @param y: -
 */
void fill_matrix(uint8_t **src, uint8_t **dest, uint32_t x, uint32_t y);

/**
 *
 * This function generates a vector if zeros of a given size
 * @param size: the size of the matrix generated by this function
 * @return a new vector of zeros
 */
uint8_t* generate_zero_vector(uint32_t size);

/**
 *
 * This function generates a matrix of zeros of a given size
 * @param x: the number of rows of the matrix generated by this function
 * @param y: tthe number of columns of the matrix generated by this function
 * @return a matrix of zeros of a given size
 */
uint8_t** generate_zero_matrix(uint32_t x, uint32_t y);

/**
 *
 * This function generates a matrix of zeros of a given size
 * @param x: the number of rows of the matrix generated by this function
 * @param y: the number of columns of the matrix generated by this function
 * @return a matrix of zeros of a given size
 */
uint8_t **random_matrix(uint32_t n, uint32_t m);

/**
 *
 * This function fill a matrix with random numbers
 * @param x: the number of rows of the matrix 
 * @param y: the number of columns of the matrix 
 */
void fill_matrix_random(uint8_t **matrix, uint32_t n, uint32_t m);

void parse_matrix_file(const char *filename, uint32_t *NB, uint32_t **n, uint32_t **b_size, uint8_t ****A, uint8_t ****b, uint8_t ****solutions);